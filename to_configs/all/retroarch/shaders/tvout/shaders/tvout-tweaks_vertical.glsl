// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
vec4 _outPosition1;
vec4 _r0010;
vec4 _v0010;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _outTexCoord;
    _v0010 = vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w));
    _r0010 = _v0010.x*MVPMatrix[0];
    _r0010 = _r0010 + _v0010.y*MVPMatrix[1];
    _r0010 = _r0010 + _v0010.z*MVPMatrix[2];
    _r0010 = _r0010 + _v0010.w*MVPMatrix[3];
    _outPosition1 = vec4(float(_r0010.x), float(_r0010.y), float(_r0010.z), float(_r0010.w));
    _outTexCoord = TexCoord.xy;
    gl_Position = _outPosition1;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
vec4 _ret_0;
float _TMP51;
float _TMP47;
float _TMP44;
float _TMP41;
float _TMP50;
float _TMP49;
float _TMP48;
float _TMP46;
float _TMP45;
float _TMP43;
float _TMP42;
float _TMP40;
vec4 _TMP39;
vec3 _TMP52;
float _TMP38;
float _TMP34;
float _TMP31;
float _TMP28;
float _TMP37;
float _TMP36;
float _TMP35;
float _TMP33;
float _TMP32;
float _TMP30;
float _TMP29;
float _TMP27;
vec4 _TMP26;
float _TMP25;
float _TMP21;
float _TMP18;
float _TMP15;
float _TMP24;
float _TMP23;
float _TMP22;
float _TMP20;
float _TMP19;
float _TMP17;
float _TMP16;
float _TMP14;
vec4 _TMP13;
float _TMP12;
float _TMP8;
float _TMP5;
float _TMP2;
float _TMP11;
float _TMP10;
float _TMP9;
float _TMP7;
float _TMP6;
float _TMP4;
float _TMP3;
float _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
float _TMP58;
float _x0059;
vec2 _c0063;
vec3 _TMP66;
vec3 _x0067;
float _a0075;
float _b0075;
float _a0079;
float _b0079;
float _a0081;
float _a0085;
float _b0085;
float _b0087;
float _a0091;
float _b0091;
float _b0093;
float _a0095;
vec2 _c0097;
vec3 _TMP100;
vec3 _x0101;
float _a0109;
float _b0109;
float _a0113;
float _b0113;
float _a0115;
float _a0119;
float _b0119;
float _b0121;
float _a0125;
float _b0125;
float _b0127;
float _a0129;
vec2 _c0131;
vec3 _TMP134;
vec3 _x0135;
float _a0143;
float _b0143;
float _a0147;
float _b0147;
float _a0149;
float _a0153;
float _b0153;
float _b0155;
float _a0159;
float _b0159;
float _b0161;
float _a0163;
vec2 _c0165;
vec3 _TMP168;
vec3 _x0169;
float _a0177;
float _b0177;
float _a0181;
float _b0181;
float _a0183;
float _a0187;
float _b0187;
float _b0189;
float _a0193;
float _b0193;
float _b0195;
float _a0197;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec3 _tempColor;
    float _oneT;
    float _oneI;
    float _Y;
    _x0059 = TEX0.y*TextureSize.y - 5.00000000E-001;
    _TMP58 = fract(_x0059);
    _oneT = 1.00000000E+000/TextureSize.y;
    _oneI = float((1.00000000E+000/InputSize.y));
    _Y = _TMP58 - -1.00000000E+000;
    _c0063 = vec2(TEX0.x, TEX0.y - _Y*_oneT);
    _TMP0 = COMPAT_TEXTURE(Texture, _c0063);
    _x0067 = ((_TMP0.xyz - 6.44531250E-002)*2.56000000E+002)/2.20000000E+002;
    _TMP52 = min(vec3( 1.00000000E+000, 1.00000000E+000, 1.00000000E+000), _x0067);
    _TMP66 = max(vec3( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000), _TMP52);
    _TMP1 = abs(_Y);
    _a0075 = _TMP1 + 5.00000000E-001;
    _b0075 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP2 = min(_a0075, _b0075);
    _TMP3 = abs(_Y);
    _a0079 = _TMP3 + 5.00000000E-001;
    _b0079 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP4 = min(_a0079, _b0079);
    _a0081 = 3.14159274E+000*float(InputSize.y)*_oneI*_TMP4;
    _TMP5 = sin(_a0081);
    _TMP6 = abs(_Y);
    _a0085 = _TMP6 - 5.00000000E-001;
    _b0085 = -1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP7 = max(_a0085, _b0085);
    _b0087 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP8 = min(_TMP7, _b0087);
    _TMP9 = abs(_Y);
    _a0091 = _TMP9 - 5.00000000E-001;
    _b0091 = -1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP10 = max(_a0091, _b0091);
    _b0093 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP11 = min(_TMP10, _b0093);
    _a0095 = 3.14159274E+000*float(InputSize.y)*_oneI*_TMP11;
    _TMP12 = sin(_a0095);
    _tempColor = _TMP66*((((3.14159274E+000*float(InputSize.y)*_oneI*_TMP2 + _TMP5) - 3.14159274E+000*float(InputSize.y)*_oneI*_TMP8) - _TMP12)/6.28318548E+000);
    _c0097 = vec2(TEX0.x, TEX0.y - _TMP58*_oneT);
    _TMP13 = COMPAT_TEXTURE(Texture, _c0097);
    _x0101 = ((_TMP13.xyz - 6.44531250E-002)*2.56000000E+002)/2.20000000E+002;
    _TMP52 = min(vec3( 1.00000000E+000, 1.00000000E+000, 1.00000000E+000), _x0101);
    _TMP100 = max(vec3( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000), _TMP52);
    _TMP14 = abs(_TMP58);
    _a0109 = _TMP14 + 5.00000000E-001;
    _b0109 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP15 = min(_a0109, _b0109);
    _TMP16 = abs(_TMP58);
    _a0113 = _TMP16 + 5.00000000E-001;
    _b0113 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP17 = min(_a0113, _b0113);
    _a0115 = 3.14159274E+000*float(InputSize.y)*_oneI*_TMP17;
    _TMP18 = sin(_a0115);
    _TMP19 = abs(_TMP58);
    _a0119 = _TMP19 - 5.00000000E-001;
    _b0119 = -1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP20 = max(_a0119, _b0119);
    _b0121 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP21 = min(_TMP20, _b0121);
    _TMP22 = abs(_TMP58);
    _a0125 = _TMP22 - 5.00000000E-001;
    _b0125 = -1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP23 = max(_a0125, _b0125);
    _b0127 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP24 = min(_TMP23, _b0127);
    _a0129 = 3.14159274E+000*float(InputSize.y)*_oneI*_TMP24;
    _TMP25 = sin(_a0129);
    _tempColor = _tempColor + _TMP100*((((3.14159274E+000*float(InputSize.y)*_oneI*_TMP15 + _TMP18) - 3.14159274E+000*float(InputSize.y)*_oneI*_TMP21) - _TMP25)/6.28318548E+000);
    _Y = _TMP58 - 1.00000000E+000;
    _c0131 = vec2(TEX0.x, TEX0.y - _Y*_oneT);
    _TMP26 = COMPAT_TEXTURE(Texture, _c0131);
    _x0135 = ((_TMP26.xyz - 6.44531250E-002)*2.56000000E+002)/2.20000000E+002;
    _TMP52 = min(vec3( 1.00000000E+000, 1.00000000E+000, 1.00000000E+000), _x0135);
    _TMP134 = max(vec3( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000), _TMP52);
    _TMP27 = abs(_Y);
    _a0143 = _TMP27 + 5.00000000E-001;
    _b0143 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP28 = min(_a0143, _b0143);
    _TMP29 = abs(_Y);
    _a0147 = _TMP29 + 5.00000000E-001;
    _b0147 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP30 = min(_a0147, _b0147);
    _a0149 = 3.14159274E+000*float(InputSize.y)*_oneI*_TMP30;
    _TMP31 = sin(_a0149);
    _TMP32 = abs(_Y);
    _a0153 = _TMP32 - 5.00000000E-001;
    _b0153 = -1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP33 = max(_a0153, _b0153);
    _b0155 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP34 = min(_TMP33, _b0155);
    _TMP35 = abs(_Y);
    _a0159 = _TMP35 - 5.00000000E-001;
    _b0159 = -1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP36 = max(_a0159, _b0159);
    _b0161 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP37 = min(_TMP36, _b0161);
    _a0163 = 3.14159274E+000*float(InputSize.y)*_oneI*_TMP37;
    _TMP38 = sin(_a0163);
    _tempColor = _tempColor + _TMP134*((((3.14159274E+000*float(InputSize.y)*_oneI*_TMP28 + _TMP31) - 3.14159274E+000*float(InputSize.y)*_oneI*_TMP34) - _TMP38)/6.28318548E+000);
    _Y = _TMP58 - 2.00000000E+000;
    _c0165 = vec2(TEX0.x, TEX0.y - _Y*_oneT);
    _TMP39 = COMPAT_TEXTURE(Texture, _c0165);
    _x0169 = ((_TMP39.xyz - 6.44531250E-002)*2.56000000E+002)/2.20000000E+002;
    _TMP52 = min(vec3( 1.00000000E+000, 1.00000000E+000, 1.00000000E+000), _x0169);
    _TMP168 = max(vec3( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000), _TMP52);
    _TMP40 = abs(_Y);
    _a0177 = _TMP40 + 5.00000000E-001;
    _b0177 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP41 = min(_a0177, _b0177);
    _TMP42 = abs(_Y);
    _a0181 = _TMP42 + 5.00000000E-001;
    _b0181 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP43 = min(_a0181, _b0181);
    _a0183 = 3.14159274E+000*float(InputSize.y)*_oneI*_TMP43;
    _TMP44 = sin(_a0183);
    _TMP45 = abs(_Y);
    _a0187 = _TMP45 - 5.00000000E-001;
    _b0187 = -1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP46 = max(_a0187, _b0187);
    _b0189 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP47 = min(_TMP46, _b0189);
    _TMP48 = abs(_Y);
    _a0193 = _TMP48 - 5.00000000E-001;
    _b0193 = -1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP49 = max(_a0193, _b0193);
    _b0195 = 1.00000000E+000/(float(InputSize.y)*_oneI);
    _TMP50 = min(_TMP49, _b0195);
    _a0197 = 3.14159274E+000*float(InputSize.y)*_oneI*_TMP50;
    _TMP51 = sin(_a0197);
    _tempColor = _tempColor + _TMP168*((((3.14159274E+000*float(InputSize.y)*_oneI*_TMP41 + _TMP44) - 3.14159274E+000*float(InputSize.y)*_oneI*_TMP47) - _TMP51)/6.28318548E+000);
    _ret_0 = vec4(_tempColor.x, _tempColor.y, _tempColor.z, 1.00000000E+000);
    FragColor = _ret_0;
    return;
} 
#endif
